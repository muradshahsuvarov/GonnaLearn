package com.example.gonnalearn

import android.app.DatePickerDialog
import android.os.Build
import android.os.Bundle
import android.text.TextUtils
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Button
import android.widget.EditText
import android.widget.Spinner
import android.widget.Toast
import androidx.annotation.RequiresApi
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.ViewModelProvider
import com.example.gonnalearn.data.Event
import com.example.gonnalearn.data.EventViewModel
import com.example.gonnalearn.data.User
import com.example.gonnalearn.data.UserViewModel
import kotlinx.android.synthetic.main.fragment_add_event.*
import kotlinx.android.synthetic.main.fragment_add_event.view.*
import java.util.*


class AddEvent : Fragment() {

    private lateinit var mEventViewModel: EventViewModel

    @RequiresApi(Build.VERSION_CODES.N)
    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        // Inflate the layout for this fragment
        val myInflater =  inflater.inflate(R.layout.fragment_add_event, container, false)

        (activity as AppCompatActivity?)!!.supportActionBar!!.title = "Add Event"

        // Initializing View Model
        mEventViewModel = ViewModelProvider(this).get(EventViewModel::class.java)

        val cal = Calendar.getInstance()
        val year = cal.get(Calendar.YEAR)
        val month = cal.get(Calendar.MONTH)
        val day = cal.get(Calendar.DAY_OF_MONTH)

        myInflater.addEventStartDate.setOnClickListener {
            val datePicker = DatePickerDialog(myInflater.context, DatePickerDialog.OnDateSetListener {
                _, mYear, mMonth, mDay -> addEventStartDate.setText("$mDay/$mMonth/$mYear")
            } , year, month, day)

            datePicker.show()
        }


        myInflater.addEventEndDate.setOnClickListener {
            val datePicker = DatePickerDialog(myInflater.context, DatePickerDialog.OnDateSetListener {
                    _, mYear, mMonth, mDay -> addEventEndDate.setText("$mDay/$mMonth/$mYear")
            } , year, month, day)

            datePicker.show()
        }

        myInflater.addEventButton.setOnClickListener{

            //TODO: Add event to the database
            try {
                var title = myInflater.findViewById<EditText>(R.id.addEventTitle).text.toString()
                var description = myInflater.findViewById<EditText>(R.id.addEventDescription).text.toString()
                var start_date = myInflater.findViewById<Button>(R.id.addEventStartDate).text.toString()
                var end_date = myInflater.findViewById<Button>(R.id.addEventEndDate).text.toString()


                // Registering User
                AddEvent(
                    title,
                    description,
                    start_date,
                    end_date
                )

            }catch(e : Exception){
                Toast.makeText(getActivity(), "$e", Toast.LENGTH_LONG).show();
            }

        }

        return myInflater
    }

    // Registering user to our GonnaLearn Database
    fun AddEvent(title : String, description : String,
                 start_date : String, end_date : String){

        try{

            // Inserting user into the database
            insertUserToDatabase(title, description, start_date, end_date)




        }catch(e : Exception){
            Toast.makeText(context, "$e", Toast.LENGTH_SHORT).show()
        }

    }

    private fun insertUserToDatabase(title : String, description : String,
    start_date : String, end_date : String) : Boolean{

        try{

            if(InputCheck(title,description,start_date, end_date)){

                // Id is a primary key nad will be autogenerated by Room Library
                    var userID = MainActivity.rememberedUser?.id
                val event = userID?.let {
                    Event(0,
                        title,
                        description,
                        start_date,
                        end_date,
                        it,
                    "",
                    "AVAILABLE")
                }
                //TODO: Add Data to Database
                // Adding user to the database
                if (event != null) {
                    mEventViewModel.addEvent(event)
                    Toast.makeText(context, "Event ${event.title} successfully created!", Toast.LENGTH_SHORT).show()
                }else{
                    Toast.makeText(context, "Event is null", Toast.LENGTH_SHORT).show()
                }

                return true
            }else{
                Toast.makeText(context, "Please fill out all fields!", Toast.LENGTH_SHORT).show()
                return false
            }
        }catch(e : Exception){
            Toast.makeText(context, "ERROR: + $e", Toast.LENGTH_SHORT).show()
        }

        return false
    }

    private fun InputCheck(title : String, description : String,
                           start_date : String, end_date : String) : Boolean{

        if(TextUtils.isEmpty(title) == false &&
            TextUtils.isEmpty(description) == false &&
            TextUtils.isEmpty(start_date) == false &&
                TextUtils.isEmpty(end_date) == false){

            return true

        }

        return false
    }

}